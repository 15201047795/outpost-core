#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013-2014, 2017, German Aerospace Center (DLR)
#
# This file is part of the development version of OUTPOST.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Authors:
# - 2013-2014, 2017, Fabian Greif (DLR RY-AVS)
# - 2014, Muhammad Bassam (DLR RY-AVS)
# - 2014, Norbert Toth (DLR RY-AVS)

import os

Import('envGlobal')

envGlobal.Append(CPPPATH=[os.path.abspath('.')])

env = envGlobal.Clone()

files  = env.Glob('outpost/rtos/*.cpp')
files += env.Glob('outpost/hal/*.cpp')

if env['OS'] == 'none':
	envGlobal.Append(CPPPATH=[os.path.abspath('../arch/none')])
	env.Append(CPPPATH=[os.path.abspath('../arch/none')])
	
	files += env.Glob('../arch/none/outpost/rtos/*.cpp')
elif env['OS'] == 'rtems':
	envGlobal.Append(CPPPATH=[os.path.abspath('../arch/rtems')])
	env.Append(CPPPATH=[os.path.abspath('../arch/rtems')])
	
	files += env.Glob('../arch/rtems/outpost/rtos/*.cpp')
	
	# Leon 3
	if env['ARCHITECTURE'] == 'leon3':
		# Remove warning because the spacewirelight driver uses void pointer
		# casts which ignore qualifiers like volatile.
		env.RemoveFromList('CCFLAGS_warning', '-Wcast-qual')
		
		# spacewirelight can not be compiled as C99 (with or without pedantic)
		env['CFLAGS_language'] = '-std=gnu99'
		
		files += env.Glob('../ext/rtems-leon3/spwl/*.c')
		files += env.Glob('../ext/rtems-leon3/apbuart/*.c')
		files += env.Glob('../ext/rtems-leon3/grspw/*.c')
		
		files += env.Glob('outpost/hal/rtems-leon3/*.cpp')
		
		# TODO only when compiling for the nexys3 board!
		files += env.Glob('outpost/hal/nexys3/*.cpp')
	
	# as RTEMS is C it uses C-Style casts. Therefore this warning has to
	# disabled for the RTEMS wrapper files.
	env.RemoveFromList('CXXFLAGS_warning', '-Wold-style-cast')
	
elif env['OS'] == 'freertos':
	envGlobal.Append(CPPPATH=[os.path.abspath('../arch/freertos')])
	env.Append(CPPPATH=[os.path.abspath('../arch/freertos')])
	
	files += env.Glob('../arch/freertos/outpost/rtos/*.cpp')
	
	# FreeRTOS uses C-Style casts. Therefore this warning has to
	# disabled for the FreeRTOS wrapper files.
	env.RemoveFromList('CXXFLAGS_warning', '-Wold-style-cast')
elif env['OS'] == 'posix':
	envGlobal.Append(CPPPATH=[os.path.abspath('../arch/posix')])
	env.Append(CPPPATH=[os.path.abspath('../arch/posix')])
	
	files += env.Glob('../arch/posix/outpost/rtos/*.cpp')
	
	envGlobal.Append(LIBS=['rt', 'pthread'])
else:
	print "Error: Environment variable 'OS' not defined. Set it to " +\
		  "none|rtems|freertos|posix to define the used operating system!"
	Exit(1)

objects = []
for file in files:
	objects.append(env.Object(file))
envGlobal.Append(objects={'rtos': objects})

library = env.StaticLibrary('outpost_rtos', objects)
envGlobal.Install('$BUILDPATH/lib', library)

