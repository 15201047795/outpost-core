#!/usr/bin/env python

import os

vars = Variables('custom.py')
vars.Add(BoolVariable('coverage', 'Set to build for coverage analysis', 0))

envGlobal = Environment(toolpath=['../../../../conf/scons/site_tools'],
                        tools=['cobc', 'buildformat'],
                        variables=vars,
                        ENV=os.environ)

Help(vars.GenerateHelpText(envGlobal))

envGlobal.Append(CPPDEFINES={'UNITTEST': 1})

modulepath  = '../../..'
buildfolder = os.path.join(modulepath, '../build')

envGlobal['BASEPATH'] = os.path.abspath('.')
if envGlobal['coverage']:
    envGlobal.Tool('hosted-gcc')
    envGlobal.Tool('buildpath')
    
    envGlobal.Append(CCFLAGS='--coverage')
    envGlobal.Append(LINKFLAGS='--coverage')

    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, 'rtos/test/coverage'))
else:
    envGlobal.Tool('hosted-llvm')
    envGlobal.Tool('buildpath')
    
    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, 'rtos/test/unit'))

envGlobal.SConscript([
        os.path.join(modulepath, 'utils/src/SConscript'),
        os.path.join(modulepath, 'utils/ext/SConscript'),
        os.path.join(modulepath, 'time/src/SConscript'),
        os.path.join(modulepath, 'rtos/src/SConscript'),
    ],
    exports='envGlobal')

env = envGlobal.Clone()

# googletest uses some C++0x features.
env['CXXFLAGS_language'] = ['-std=c++0x']

env.RemoveFromList('CCFLAGS_warning', [
    '-Wunused-parameter',
    '-Wshadow',
    '-Wconversion',
    '-Wold-style-cast',
    '-Wundef',
    '-Wmissing-declarations',
])

env.Append(CPPPATH=['.'])
env.Append(LIBS=['cobc_rtos', 'cobc_time', 'gmock-1.6.0', 'pthread'])
env.Append(LIBPATH=['/usr/lib', '$BUILDPATH/lib'])

files  = env.Glob('*.cpp') + env.Glob('*/*.cpp')

envGlobal.Alias('build', env.Program('unittest', files))

