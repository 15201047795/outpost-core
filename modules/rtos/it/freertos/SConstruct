#!/usr/bin/env python

import os

# root folder of the libCOBC library
rootpath = '../../../../'
modulepath  = os.path.join(rootpath, 'modules')
buildfolder = os.path.join(rootpath, 'build')

# path to the xpcc root directory
# TODO: don't use a absolute path here!
xpccpath = '/home/user/development/xpcc'

envGlobal = Environment(toolpath=[rootpath + '/conf/scons/site_tools'],
                        tools=['compiler_arm_none_eabi_gcc', 'settings_buildpath', 'utils_buildformat', 'utils_buildsize'],
                        OS='freertos',
                        BOARD='stm32f4discovery',
                        CCFLAGS_target=['-mcpu=cortex-m4',
                                        '-mthumb',
                                        '-mthumb-interwork',
                                        '-mfloat-abi=softfp',
                                        '-mfpu=fpv4-sp-d16',
                                        '-nostdlib',
                                        ],
                        CCFLAGS_debug=['-gdwarf-2'],
                        CCFLAGS_other=['-finline-limit=10000',
                                       '-funsigned-char',
                                       '-funsigned-bitfields',
                                       '-fno-split-wide-types',
                                       '-fno-move-loop-invariants',
                                       '-fno-tree-loop-optimize',
                                       '-fno-unwind-tables',
                                       ],
                        CXXFLAGS_other=['-fno-threadsafe-statics',
                                        '-fuse-cxa-atexit',
                                        ],
                        ENV=os.environ)

envGlobal['BASEPATH']  = os.path.abspath('.')
envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, 'rtos/test/freertos'))

envGlobal.Append(CPPPATH=[
    '.',
    os.path.abspath(xpccpath + '/ext'),    # for FreeRTOS
    os.path.abspath(os.path.join(rootpath, 'modules/spp/default')),
    os.path.abspath(os.path.join(rootpath, 'modules/pus/default')),
    os.path.abspath(os.path.join(rootpath, 'modules/log/default')),
])

envGlobal.SConscript(os.path.join(rootpath, 'modules/SConscript.library'), exports='envGlobal')

env = envGlobal.Clone()

# Combine all libraries into one
files = []
for lib in env['objects']:
    for f in env['objects'][lib]:
        files.extend(f)

library = env.StaticLibrary('libcobc', files)
envGlobal.Alias('library', library)

env = Environment(tools= ['xpcc'],
                  toolpath = [xpccpath + '/scons/site_tools'],
                  BUILDPATH = envGlobal['BUILDPATH'],
                  XPCC_BUILDPATH = envGlobal['BUILDPATH'])

env.Append(CPPPATH=['../reference'])

# find all source files
files  = env.FindFiles('.')
files += env.Glob('../reference/*.cpp')

program = env.Program(target=env['XPCC_CONFIG']['general']['name'], source=files.sources + library)

env.Append(LIBS=['libcobc', 'nosys'])
env.Append(LIBPATH=['$BUILDPATH'])

env.Append(CPPPATH=[
    modulepath + '/utils/src',
    modulepath + '/time/src',
    modulepath + '/rtos/src',
    modulepath + '/rtos/arch/freertos',
    modulepath + '/smpc/src',
    modulepath + '/spp/src',
    modulepath + '/pus/src',
])

# build the xpcc library
env.XpccLibrary()
env.Defines()

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
env.Alias('defines', env.ShowDefines())

hexfile = env.Hex(program)

env.Alias('program', env.OpenOcd(program))
env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('build')
