#!/usr/bin/env python

import os

rootpath = '../../../../'
envGlobal = Environment(toolpath=[rootpath + 'conf/scons/site_tools'],
				        tools=['compiler_or32_aac_elf_gcc', 'settings_buildpath', 'utils_buildformat', 'utils_buildsize'],
			        	ENV=os.environ)

envGlobal['BASEPATH'] = os.path.abspath('.')
envGlobal['BUILDPATH'] = os.path.abspath(rootpath + 'build/rtos/test/none_or32')

envGlobal.Append(CPPPATH=[
    os.path.abspath(os.path.join(rootpath, 'modules/spp/default')),
    os.path.abspath(os.path.join(rootpath, 'modules/pus/default')),
    os.path.abspath(os.path.join(rootpath, 'modules/log/default')),
])

envGlobal.SConscript(os.path.join(rootpath, 'modules/SConscript.library'), exports='envGlobal')

env = envGlobal.Clone()

env.Append(CPPPATH=[
	'.',
	'../reference'
])

env.AppendUnique(LIBS=[
    'outpost_log',
    'outpost_pus',
    'outpost_spp',
    'outpost_rtos',
    'outpost_smpc',
    'outpost_time',
    'outpost_utils',
])
env.Append(LIBPATH=['$BUILDPATH/lib'])

files  = env.Glob('*.cpp')
files += env.Glob('../reference/*.cpp')

program = env.Program('none_urtu', files)

envGlobal.Alias('build', program)
envGlobal.Alias('install', env.Install('bin', program))

envGlobal.Default(['build', 'install'])
