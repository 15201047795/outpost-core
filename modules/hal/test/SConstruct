#!/usr/bin/env python

import os

vars = Variables('custom.py')
vars.Add(BoolVariable('coverage', 'Set to build for coverage analysis', 0))

module = 'hal'

rootpath = '../../../'
envGlobal = Environment(toolpath=[rootpath + 'conf/scons/site_tools'],
                        tools=['utils/buildformat'],
                        variables=vars,
                        BASEPATH=os.path.abspath('.'),
                        ENV=os.environ)
Help(vars.GenerateHelpText(envGlobal))

buildfolder = os.path.join(rootpath, 'build')
if envGlobal['coverage']:
    envGlobal.Tool('compiler/hosted_gcc_coverage')
    envGlobal.Tool('settings/buildpath')
    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, module, 'test/coverage'))
else:
    envGlobal.Tool('compiler/hosted_llvm')
    envGlobal.Tool('settings/buildpath')
    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, module, 'test/unittest'))

envGlobal.Append(CPPPATH=[
    os.path.join(rootpath, 'modules/spp/default'),
    os.path.join(rootpath, 'modules/pus/default'),
    os.path.join(rootpath, 'modules/log/default'),
])

envGlobal.SConscript(os.path.join(rootpath, 'modules/SConscript.library'), exports='envGlobal')

# The tests use C++11
envGlobal['CXXFLAGS_language'] = ['-std=c++0x']
envGlobal.SConscript(os.path.join(rootpath, 'modules/SConscript.test'), exports='envGlobal')

env = envGlobal.Clone()

env.AppendUnique(LIBS=[
    'cobc_time',
    'cobc_utils',
    'cobc_rtos',
])

files  = env.Glob('*.cpp')
files += env.Glob('cobc/*.cpp')
files += env.Glob('cobc/*/*.cpp')
files += env.Glob('cobc/*/*/*.cpp')

# Do not include the module files as library but directly as compiled objects.
# Otherwise only the realy used symbols are pulled in which yields wrong
# results for the coverage analysis.
files += env['objects'][module]

envGlobal.Alias('build', env.Program('runner', files))
envGlobal.Default('build')
