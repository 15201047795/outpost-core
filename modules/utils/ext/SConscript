#!/usr/bin/env python

import os

Import('envGlobal')

if envGlobal['ARCHITECTURE'] == 'hosted':
    gmock = 'gmock-1.7.0'
    # googletest should only be used when compiling for an hosted environment
    envGlobal.Append(CPPPATH=[
        os.path.abspath('%s/fused-src' % gmock),
        os.path.abspath('rapidcheck/include'),
        os.path.abspath('rapidcheck/extras/gmock/include/'),
        os.path.abspath('rapidcheck/extras/gtest/include/'),
    ])

    env = envGlobal.Clone()
    env['CXXFLAGS_language'] = ['-std=c++11']

    files  = env.Glob('rapidcheck/src/*.cpp')
    files += env.Glob('rapidcheck/src/*/*.cpp')
    files += env.Glob('rapidcheck/src/*/*/*.cpp')
    libraryRapidCheck = env.StaticLibrary('rapidcheck', files)

    env = envGlobal.Clone()
    env['CXXFLAGS_language'] = ['-std=c++98']

    env.RemoveFromList('CCFLAGS_warning', [
        '-Wconversion',
        '-Wundef',
        '-Wmissing-declarations'])
    env.RemoveFromList('CXXFLAGS_warning', '-Wold-style-cast')

    files = env.Glob('%s/fused-src/*.cc' % gmock)
    objects = []
    for file in files:
        objects.append(env.Object(file))
    envGlobal.Append(objects={'gmock': objects})

    libraryGmock = env.StaticLibrary('gmock-local', objects)

    envGlobal.Install('$BUILDPATH/lib', libraryGmock)
    envGlobal.Install('$BUILDPATH/lib', libraryRapidCheck)
    envGlobal.Append(LIBS=['gmock-local', 'rapidcheck', 'pthread'])

