#!/usr/bin/env python

import os

envGlobal = Environment(toolpath=['../../../../utils/trunk/conf/scons/site_tools'],
				        tools=['hosted', 'buildpath', 'buildformat'],
			        	ENV=os.environ)

envGlobal.Append(CPPDEFINES={'UNITTEST': 1})

envGlobal['BASEPATH'] = os.path.abspath('.')
envGlobal['BUILDPATH'] = os.path.abspath('../../build/test/unit')

envGlobal.SConscript(['../../../../utils/trunk/src/SConscript',
                      '../../../../utils/trunk/ext/SConscript',
                      '../../src/SConscript'], exports='envGlobal')

env = envGlobal.Clone()

env['CXXFLAGS_std'] = ['-std=c++98']
env['CCFLAGS_warning'] = [
	'-W',
	'-Wall',
	'-Wextra',
	'-Wformat',
	'-Wno-unused-parameter',
	'-Winit-self',
	'-Wcast-qual',
	'-Wcast-align',
	'-Wimplicit',
#	'-Wshadow',
	'-Wpointer-arith',
	'-Wwrite-strings',
	'-Wredundant-decls',
	'-Wunused',
	'-Wuninitialized',
#	'-Wconversion',
#	'-Wold-style-cast',
#	'-Wundef',
#	'-Winline',
#	'-Wmissing-declarations',
]

env.Append(CPPPATH=[
	'.'
])
env.Append(LIBS=['pthread', 'gmock', 'cobc_time'])
env.Append(LIBPATH=['/usr/lib', '$BUILDPATH/lib'])

files  = env.Glob('*.cpp')

envGlobal.Alias('build', env.Program('unittest', files))

