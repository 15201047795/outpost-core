#!/usr/bin/env python

import os
import commands

envGlobal = Environment(toolpath=['../../../../conf/scons/site_tools'],
				        tools=['cobc', 'buildformat'],
			        	ENV=os.environ)

envGlobal.Append(CPPDEFINES={'UNITTEST': 1})

envGlobal['BASEPATH'] = os.path.abspath('.')
if ARGUMENTS.get('coverage') == '1':
	envGlobal.Tool('hosted')
	envGlobal.Tool('buildpath')
	
	envGlobal.Append(CCFLAGS='--coverage')
	envGlobal.Append(LINKFLAGS='--coverage')
	
	# detect GCC (g++) version
	GCC_VERSION = commands.getoutput(envGlobal['CXX'] + ' -dumpversion')
	if float(GCC_VERSION) < 4.7:
		envGlobal['CC'] = 'gcc-4.7'
		envGlobal['CXX'] = 'g++-4.7'
		envGlobal['AS'] = 'gcc-4.7'
		envGlobal['AR'] = 'gcc-ar-4.7'
		envGlobal['NM'] = 'gcc-nm-4.7'
		envGlobal['RANLIB'] = 'gcc-ranlib-4.7'

	envGlobal['BUILDPATH'] = os.path.abspath('../../build/test/coverage')
else:
	envGlobal.Tool('hosted-llvm')
	envGlobal.Tool('buildpath')
	
	envGlobal['BUILDPATH'] = os.path.abspath('../../build/test/unit')

modulepath = '../../..'
envGlobal.SConscript(
	[
		modulepath + '/utils/src/SConscript',
		modulepath + '/utils/ext/SConscript',
		modulepath + '/time/src/SConscript',
		modulepath + '/rtos/src/SConscript',
		modulepath + '/smpc/src/SConscript',
	],
	exports='envGlobal')

env = envGlobal.Clone()

# googletest uses some C++0x features.
env['CXXFLAGS_language'] = ['-std=c++0x']
env['CCFLAGS_warning'] = [
	'-W',
	'-Wall',
	'-Wextra',
	'-Wformat',
	'-Wno-unused-parameter',
	'-Winit-self',
	'-Wcast-qual',
	'-Wcast-align',
#	'-Wshadow',
	'-Wpointer-arith',
	'-Wwrite-strings',
	'-Wredundant-decls',
	'-Wunused',
	'-Wuninitialized',
#	'-Wconversion',
#	'-Wold-style-cast',
#	'-Wundef',
#	'-Wmissing-declarations',
]

env.Append(CPPPATH=[
	'.'
])
env.Append(LIBS=['cobc_smpc', 'cobc_rtos', 'cobc_time', 'gmock', 'pthread'])
env.Append(LIBPATH=['/usr/lib', '$BUILDPATH/lib'])

files  = env.Glob('*.cpp') + env.Glob('*/*.cpp')

envGlobal.Alias('build', env.Program('unittest', files))

