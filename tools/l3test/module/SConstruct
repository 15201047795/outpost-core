#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

rootpath = '../../../'

# path to libCOBC
libcobc_path = rootpath + 'ext/libcobc/'

envGlobal = Environment(toolpath=[libcobc_path + 'conf/scons/site_tools'],
			            tools=['buildformat', 'hosted-gcc', 'buildpath', 'cobc'],
				        ENV=os.environ)

envGlobal['BASEPATH']  = os.path.abspath('.')
envGlobal['BUILDPATH'] = os.path.abspath(rootpath + 'build/lua')

envGlobal.Append(CPPPATH=['../ext/lua-5.2.3/src'])

# Binding code between Lua (written in C) and C++ has to use some C casts
envGlobal.RemoveFromList('CXXFLAGS_warning', ['-Wold-style-cast'])


# Build bitstream module
env = envGlobal.Clone()

bitstream_files   = env.Glob('bitstream/*.cpp')
bitstream_library = env.SharedLibrary('../bin/module/bitstream', bitstream_files, SHLIBPREFIX='')

# Build crc16 module
env = envGlobal.Clone()
envGlobalTemp = envGlobal
envGlobal = env

env.Append(CCFLAGS=['-fPIC'])

modulepath = libcobc_path + 'modules/'
env.SConscript([
        os.path.join(modulepath, 'utils/src/SConscript'),
    ],
    exports='envGlobal')

env.Append(LIBS=['cobc_utils'])
env.Append(LIBPATH=['/usr/lib', '$BUILDPATH/lib'])

crc16_files   = env.Glob('crc16/*.cpp')
crc16_library = env.SharedLibrary('../bin/module/crc16', crc16_files, SHLIBPREFIX='')

envGlobal = envGlobalTemp

# Build l3test module
env = envGlobal.Clone()

env['CXXFLAGS_language'] = ['-std=c++0x']
env.Append(CPPPATH=['../src'])
env.Append(CPPPATH=['.'])

l3test_files   = env.Glob('l3test/*.cpp')
l3test_files  += env.Glob('../src/l3test/*/*.cpp')

l3test_library = env.SharedLibrary('../bin/module/l3test', l3test_files, SHLIBPREFIX='')


envGlobal.Default([bitstream_library, crc16_library, l3test_library])
