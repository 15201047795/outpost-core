#!/usr/bin/env python

env = Environment(toolpath=['../../ext/libcobc/conf/scons/site_tools'],
                  tools=['cobc', 'hosted-gcc', 'buildformat', 'buildpath'],
                  COMPILERVERSION='4.7')

env['BUILDPATH'] = 'build'
env['BASEPATH'] = '.'

env.Append(CPPPATH=['ext/lua-5.2.3/src'])

lua_env = env.Clone()

lua_env.RemoveFromList('CCFLAGS_warning', '-Wcast-qual')
lua_env['CFLAGS_language'] = [
    # C99 generates an error about not finding off_t and pclose
    '-std=gnu99',
]

lua_env.Append(CFLAGS=['-DLUA_USE_LINUX'])
lua_files = env.FilteredGlob('ext/lua-5.2.3/src/*.c', ['lua.c', 'luac.c'])

lua = lua_env.StaticLibrary(source=lua_files, target='lua')

# Compile everything except Lua as C++11
env['CXXFLAGS_language'] = '-std=c++11'

#env.Append(CPPPATH=['ext/tclap-1.2.1/include'])

# Removed due to tclap-1.2.1
env.RemoveFromList('CCFLAGS_warning', '-Winline')
env.RemoveFromList('CXXFLAGS_warning', '-Wold-style-cast')

library_files = []
library_files.extend(env.Glob('src/*/*.cpp'))

l3test = env.StaticLibrary(source=library_files, target='l3test')

files = []
files.extend(env.Glob('src/*.cpp'))

libs = ['m', 'readline', 'dl', l3test, lua]

env_program = env.Clone()

program = env_program.Program(source=files, target='l3test', LIBS=libs)
install = env_program.Install('bin/', program)
env_program.Alias('build', install) 

# -----------------------------------------------------------------------------

env_test = env.Clone()
env_test.Append(CPPPATH=['src', 'ext/gmock-1.6.0'])

test_files = []
test_files.extend(env.Glob('ext/gmock-1.6.0/*.cc'))
test_files.extend(env.Glob('src/utils/*.cpp'))
test_files.extend(env.Glob('test/*.cpp'))
test_files.extend(env.Glob('test/*/*.cpp'))

# Removed due to gmock/gtest
env_test.RemoveFromList('CCFLAGS_warning', [
    '-Wconversion',
    '-Wundef',
    '-Winline',
    '-Wmissing-declarations'])
env_test.RemoveFromList('CXXFLAGS_warning', '-Wold-style-cast')

libs += ['pthread']

#test_program = env_test.Program(source=test_files, target='unittest', LIBS=libs) 
#env_test.Alias('test', test_program)
#env.Alias('unittest', env.Command('thisfileshouldnotexist', test_program, '@"%s"' % test_program[0].abspath))

