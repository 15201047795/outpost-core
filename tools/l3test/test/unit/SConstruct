#!/usr/bin/env python

import os

rootpath = '../../'
cobcpath = rootpath + '../../'

envGlobal = Environment(toolpath=[cobcpath + 'conf/scons/site_tools'],
                        tools=['cobc', 'buildformat'],
                        ENV=os.environ)

envGlobal.Append(CPPDEFINES={'UNITTEST': 1})

envGlobal['BASEPATH'] = os.path.abspath('.')
if ARGUMENTS.get('coverage') == '1':
    envGlobal.Tool('hosted-gcc')
    envGlobal.Tool('buildpath')
    
    envGlobal.Append(CCFLAGS='--coverage')
    envGlobal.Append(LINKFLAGS='--coverage')
    
    # detect GCC (g++) version
    version = envGlobal.DetectGccVersion()
    if version < 40700:
        print("GCC >= 4.7 required")
        env.Exit(1)

    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(cobcpath, 'build/l3test/test/coverage'))
else:
    envGlobal.Tool('hosted-llvm')
    envGlobal.Tool('buildpath')
    
    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(cobcpath, 'build/l3test/test/unit'))

envGlobal['CXXFLAGS_language'] = ['-std=c++0x']

envGlobal.SConscript(
    [
        os.path.join(cobcpath, 'modules/utils/src/SConscript'),
        os.path.join(cobcpath, 'modules/utils/ext/SConscript'),
        os.path.join(rootpath, 'ext/SConscript'),
        os.path.join(rootpath, 'src/SConscript'),
    ],
    exports='envGlobal')

env = envGlobal.Clone()

env.RemoveFromList('CCFLAGS_warning', [
    '-Wshadow',
    '-Wconversion',
    '-Wold-style-cast',
    '-Wundef',
    '-Wmissing-declarations',
])

env.Append(CPPPATH=[
    '.'
])
env.Append(LIBS=['cobc_utils', 'l3test', 'lua', 'gmock-1.6.0'])
env.Append(LIBPATH=['/usr/lib', '$BUILDPATH/lib'])

files  = env.Glob('*.cpp')
files += env.Glob('*/*.cpp')

envGlobal.Alias('build', env.Program('unittest', files))

envGlobal.Default('build')
